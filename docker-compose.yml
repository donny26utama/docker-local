services:
  # Mysql service
  mysql.service:
    image: mysql:latest
    container_name: ${SERVICE_ENV}_mysql_service
    restart: unless-stopped
    tty: true
    ports:
      - ${DOCKER_MYSQL_PORT}:3306
    volumes:
      - ./docker/mysql/conf.d/my.cnf:/etc/mysql/conf.d/my.cnf:ro
      - ./volumes/mysql/data:/var/lib/mysql
      - ./volumes/mysql/logs:/var/log/mysql
    environment:
      TZ: ${SERVICE_TIMEZONE}
      MYSQL_ROOT_PASSWORD: ${DOCKER_MYSQL_ROOT_PASSWORD}
    networks:
      - sync-network

  # MariaDB service
  mariadb.service:
    image: mariadb:latest
    container_name: ${SERVICE_ENV}_mariadb_service
    restart: unless-stopped
    tty: true
    ports:
      - ${DOCKER_MARIADB_PORT}:3306
    volumes:
      - ./docker/mariadb/conf.d/my.cnf:/etc/mysql/conf.d/my.cnf:ro
      - ./volumes/mariadb/data:/var/lib/mysql
      - ./volumes/mariadb/logs:/var/log/mysql
    environment:
      TZ: ${SERVICE_TIMEZONE}
      MYSQL_ROOT_PASSWORD: ${DOCKER_MARIADB_ROOT_PASSWORD}
    networks:
      - sync-network

  # Percona MySQL service
  percona.service:
    image: percona:latest
    container_name: ${SERVICE_ENV}_percona_service
    restart: unless-stopped
    tty: true
    ports:
      - ${DOCKER_PERCONA_PORT}:3306
    volumes:
      - ./docker/percona/mysql/conf.d/my.cnf:/etc/mysql/conf.d/my.cnf:ro
      - ./volumes/percona/mysql/data:/var/lib/mysql
      - ./volumes/percona/mysql/logs:/var/log/mysql
    environment:
      TZ: ${SERVICE_TIMEZONE}
      MYSQL_ROOT_PASSWORD: ${DOCKER_PERCONA_ROOT_PASSWORD}
    networks:
      - sync-network

  # Postgres service
  postgres.service:
    image: postgres:latest
    container_name: ${SERVICE_ENV}_postgres_service
    restart: unless-stopped
    tty: true
    ports:
      - ${DOCKER_POSTGRES_PORT}:5432
    volumes:
      - ./docker/postgres/conf/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./volumes/postgres/data:/var/lib/postgresql/data
    environment:
      TZ: ${SERVICE_TIMEZONE}
      PGTZ: ${SERVICE_TIMEZONE}
      POSTGRES_PASSWORD: ${DOCKER_POSTGRES_PASSWORD}
    networks:
      - sync-network

  # Sqlserver service
  sqlserver.service:
    image: mcr.microsoft.com/mssql/server:latest
    container_name: ${SERVICE_ENV}_sqlserver_service
    restart: unless-stopped
    tty: true
    ports:
      - ${DOCKER_MSSQL_PORT}:1433
    volumes:
      - ./volumes/mssql/data:/var/opt/mssql/data
    environment:
      ACCEPT_EULA: 'Y'
      MSSQL_PID: Express
      MSSQL_SA_PASSWORD: ${DOCKER_MSSQL_SA_PASSWORD}
    networks:
      - sync-network

  # MongoDB service
  mongodb.service:
    image: mongo:latest
    container_name: ${SERVICE_ENV}_mongodb_service
    restart: unless-stopped
    tty: true
    ports:
      - ${DOCKER_MONGO_PORT}:27017
    volumes:
      - ./volumes/mongo/data:/data/db
      - ./volumes/mongo/conf:/data/configdb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DOCKER_MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${DOCKER_MONGO_INITDB_ROOT_PASSWORD}
    networks:
      - sync-network

  # Oracle service
  oracle.service:
    image: container-registry.oracle.com/database/enterprise:latest
    container_name: ${SERVICE_ENV}_oracle_service
    restart: unless-stopped
    tty: true
    ports:
      - ${DOCKER_ORACLE_PORT}:1521
    environment:
      ORACLE_SID: ${DOCKER_ORACLE_SID}
      ORACLE_PDB: ${DOCKER_ORACLE_PDB}
      ORACLE_PWD: ${DOCKER_ORACLE_PWD}
    volumes:
      - ./volumes/oracle/data:/opt/oracle/oradata
      - ./volumes/oracle/backup:/opt/oracle/backup
    networks:
      - sync-network

  # RQLite service
  rqlite.service:
    image: rqlite/rqlite:latest
    container_name: ${SERVICE_ENV}_rqlite_service
    restart: unless-stopped
    tty: true
    ports:
      - ${DOCKER_RQLITE_PORT}:4001
    volumes:
      - ./volumes/rqlite/data:/rqlite/filedata
    networks:
      - sync-network

  # Redis service
  redis.service:
    image: redis:latest
    container_name: ${SERVICE_ENV}_redis_service
    restart: unless-stopped
    tty: true
    ports:
      - ${DOCKER_REDIS_PORT}:6379
    volumes:
      - ./volumes/redis/data:/data
    networks:
      - sync-network

  # Memcached service
  memcached.service:
    image: memcached:latest
    container_name: ${SERVICE_ENV}_memcached_service
    restart: unless-stopped
    tty: true
    ports:
      - ${DOCKER_MEMCACHED_PORT}:11211
    networks:
      - sync-network

  # RabbitMQ service
  rabbitmq.service:
    image: rabbitmq:3-management
    container_name: ${SERVICE_ENV}_rabbitmq_service
    restart: unless-stopped
    tty: true
    ports:
      - ${DOCKER_RABBITMQ_PORT}:5672
      - ${DOCKER_RABBITMQ_MANAGEMENT_PORT}:15672
    volumes:
      - ./volumes/rabbitmq/data:/var/lib/rabbitmq
      - ./volumes/rabbitmq/log:/var/log/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${DOCKER_RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${DOCKER_RABBITMQ_DEFAULT_PASS}

  # Portainer service
  portainer.service:
    image: portainer/portainer-ce
    container_name: ${SERVICE_ENV}_portainer_service
    restart: always
    security_opt:
      - no-new-privileges:true
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./volumes/portainer/data:/data
      - ./volumes/portainer/certs:/certs
    ports:
      - ${DOCKER_PORTAINER_PORT}:9000
      - ${DOCKER_PORTAINER_SSL_PORT}:9443
    networks:
      - sync-network

  # Minio service
  minio.service:
    image: minio/minio:latest
    container_name: ${SERVICE_ENV}_minio_service
    restart: unless-stopped
    tty: true
    command: server /data --console-address :9001
    ports:
      - ${DOCKER_MINIO_PORT}:9000
      - ${DOCKER_MINIO_PORT_CONSOLE}:9001
    volumes:
      - ./volumes/s3-minio/data:/data
    environment:
      MINIO_ROOT_USER: ${DOCKER_MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${DOCKER_MINIO_ROOT_PASSWORD}
    networks:
      - sync-network

  # Webdav service
  webdav.service:
    image: bytemark/webdav
    container_name: ${SERVICE_ENV}_webdav_service
    restart: unless-stopped
    tty: true
    ports:
      - ${DOCKER_WEBDAV_PORT}:80
    volumes:
      - ./volumes/webdav/share:/var/lib/dav
    environment:
      AUTH_TYPE: ${DOCKER_WEBDAV_AUTH_TYPE}
      USERNAME: ${DOCKER_WEBDAV_USERNAME}
      PASSWORD: ${DOCKER_WEBDAV_PASSWORD}

  # FTP service
  ftp.service:
    image: garethflowers/ftp-server
    container_name: ${SERVICE_ENV}_ftp_service
    restart: unless-stopped
    tty: true
    ports:
      - ${DOCKER_FTP_ACTIVE_PORT}:20-21/tcp
      - ${DOCKER_FTP_PASIVE_PORT}:40000/tcp
    volumes:
      - ./volumes/ftp/share:/home/${DOCKER_FTP_USERNAME}/shared
    environment:
      FTP_USER: ${DOCKER_FTP_USERNAME}
      FTP_PASS: ${DOCKER_FTP_PASSWORD}

  # SFTP service
  sftp.service:
    image: atmoz/sftp
    container_name: ${SERVICE_ENV}_sftp_service
    restart: unless-stopped
    tty: true
    ports:
      - ${DOCKER_SFTP_PORT}:22
    command:
      - ${DOCKER_SFTP_USERNAME}:${DOCKER_SFTP_PASSWORD}:1001
    volumes:
      - ./volumes/sftp/share:/home/{DOCKER_SFTP_USERNAME}/upload
      - ./volumes/sftp/keys/ssh_host_rsa_key.pub:/home/${DOCKER_SFTP_USERNAME}/.ssh/ssh_host_rsa_key.pub:ro
      - ./volumes/sftp/keys/ssh_host_ed25519_key.pub:/home/${DOCKER_SFTP_USERNAME}/.ssh/ssh_host_ed25519_key.pub:ro

  # Mailpit service
  mailpit.service:
    image: axllent/mailpit:latest
    container_name: ${SERVICE_ENV}_mailpit_service
    restart: unless-stopped
    tty: true
    volumes:
      - ./volumes/mailpit/data:/data
    ports:
      - ${DOCKER_MAILPIT_PORT}:1025
      - ${DOCKER_MAILPIT_INBOX_PORT}:8025
    environment:
      TZ: ${SERVICE_TIMEZONE}
    networks:
      - sync-network

  # Vault service
  vault.service:
    image: hashicorp/vault:latest
    container_name: ${SERVICE_ENV}_vault_service
    restart: unless-stopped
    tty: true
    volumes:
      - ./docker/vault/config.d:/vault/config.d
      - ./volumes/vault/file:/vault/file
      - ./volumes/vault/logs:/vault/logs
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${DOCKER_VAULT_DEV_ROOT_TOKEN_ID}
    ports:
      - ${DOCKER_VAULT_PORT}:8200
    cap_add:
      - IPC_LOCK
    networks:
      - sync-network

  # SonarQube service
  sonarqube.service:
    image: sonarqube:latest
    container_name: ${SERVICE_ENV}_sonarqube_service
    ports:
      - ${DOCKER_SONARQUBE_PORT}:9000
    environment:
      SONAR_JDBC_URL: ${DOCKER_SONARQUBE_JDBC_URL}
      SONAR_JDBC_USERNAME: ${DOCKER_SONARQUBE_JDBC_USERNAME}
      SONAR_JDBC_PASSWORD: ${DOCKER_SONARQUBE_JDBC_PASSWORD}
    volumes:
      - ./volumes/sonarqube/conf:/opt/sonarqube/conf
      - ./volumes/sonarqube/data:/opt/sonarqube/data
      - ./volumes/sonarqube/logs:/opt/sonarqube/logs
      - ./volumes/sonarqube/temp:/opt/sonarqube/temp
      - ./volumes/sonarqube/extensions:/opt/sonarqube/extensions
      # - ../volumes/sonarqube/bundled-plugins:/opt/sonarqube/bundled-plugins
    networks:
      - sync-network

  # OpenProject service
  openproject.service:
    image: openproject/community:${DOCKER_OPENPROJECT_VERSION}
    container_name: ${SERVICE_ENV}_openproject_service
    restart: unless-stopped
    tty: true
    ports:
      - ${DOCKER_OPENPROJECT_PORT}:80
    environment:
      OPENPROJECT_HTTPS: false
      OPENPROJECT_HOST__NAME: 127.0.0.1:${DOCKER_OPENPROJECT_PORT}
      OPENPROJECT_SECRET_KEY_BASE: secret
      OPENPROJECT_CACHE__MEMCACHE__SERVER: memcache:11211
      DATABASE_URL: postgresql://postgres:${DOCKER_POSTGRES_PASSWORD}@postgres/openproject
    volumes:
      - ./volumes/openproject/pgdata:/var/openproject/pgdata
      - ./volumes/openproject/assets:/var/openproject/assets
    networks:
      - sync-network

  # TaskCafe service
  taskcafe:
    image: taskcafe/taskcafe
    container_name: ${SERVICE_ENV}_taskcafe_service
    restart: unless-stopped
    tty: true
    ports:
      - ${DOCKER_TASKCAFE_PORT}:3333
    environment:
      TASKCAFE_MIGRATE: "true"
      TASKCAFE_DATABASE_HOST: postgres
      TASKCAFE_DATABASE_USER: ${DOCKER_TASKCAFE_DATABASE_USER}
      TASKCAFE_DATABASE_PASSWORD: ${DOCKER_TASKCAFE_DATABASE_PASSWORD}
    volumes:
      - ./volumes/taskcafe/uploads:/root/uploads
    networks:
      - sync-network

  # Metabase service
  metabase.service:
    image: metabase/metabase:latest
    container_name: ${SERVICE_ENV}_metabase_service
    restart: unless-stopped
    tty: true
    ports:
      - ${DOCKER_METABASE_PORT}:3000
    networks:
      - sync-network

networks:
  sync-network:
    driver: bridge
    external: true
